generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model event_details {
  konserId       Int       @id
  harga          Int?
  isPaidEvent    Boolean?  @default(false)
  availableSeats Int
  ticketType     String?
  referralCode   String?
  discount       Float?
  discountExpiry DateTime? @db.DateTime(0)
  createdAt      DateTime? @default(now()) @db.DateTime(0)
  konser         konser    @relation(fields: [konserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_details_ibfk_1")
}

model konser {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime?       @default(now()) @db.DateTime(0)
  deskripsiKonser String
  gambarKonser    String?
  lokasi          String?
  namaKonser      String
  tanggal         DateTime?       @db.DateTime(0)
  waktu           String
  event_details   event_details[]
  Payment         Payment[]
  review          Review[]
}

model User {
  id                 Int       @id @default(autoincrement())
  username           String    @unique
  password           String
  ownedReferalNumber String?   @unique
  referalNumber      String?
  balance            Int       @default(0)
  coupon             Boolean   @default(false)
  couponValidUntil   DateTime?
  role               Role      @default(User)
  createdAt          DateTime  @default(now())
  bonus              Bonus[]
  Payment            Payment[]
}

enum Role {
  User
  Admin
}

model Bonus {
  bonusId    Int      @id @default(autoincrement())
  owner      User     @relation(fields: [ownerId], references: [id])
  amount     Int      @default(10000)
  ownerId    Int
  validUntil DateTime
}

model Payment {
  id        Int       @id @default(autoincrement())
  IdKonser  Int
  userId    Int
  amount    Float
  status    String
  createdAt DateTime? @default(now())

  // Relations
  konser konser @relation(fields: [IdKonser], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int
  experience  String
  quality     String
  suggestions String?
  ConcertId   Int
  konser      konser   @relation(fields: [ConcertId], references: [id])
  createdAt   DateTime @default(now())
}
